diff --git a/components/esp32/event_default_handlers.c b/components/esp32/event_default_handlers.c
index 6b127e60..48e1f876 100644
--- a/components/esp32/event_default_handlers.c
+++ b/components/esp32/event_default_handlers.c
@@ -69,6 +69,151 @@ static esp_err_t system_event_eth_got_ip_default(system_event_t *event);
 */
 static system_event_handler_t default_event_handlers[SYSTEM_EVENT_MAX] = { 0 };
 
+#ifdef CONFIG_LUA_RTOS_ETH_HW_TYPE_SPI
+static esp_err_t system_event_spi_eth_start_handle_default(system_event_t *event);
+static esp_err_t system_event_spi_eth_stop_handle_default(system_event_t *event);
+static esp_err_t system_event_spi_eth_connected_handle_default(system_event_t *event);
+static esp_err_t system_event_spi_eth_disconnected_handle_default(system_event_t *event);
+esp_err_t tcpip_adapter_spi_eth_start(uint8_t *mac, tcpip_adapter_ip_info_t *ip_info);
+
+esp_err_t system_event_spi_eth_start_handle_default(system_event_t *event)
+{
+    tcpip_adapter_ip_info_t eth_ip;
+    uint8_t eth_mac[6] = {0x00,0x00,0x00,0x00,0x00,0x00};
+
+    tcpip_adapter_get_ip_info(TCPIP_ADAPTER_IF_SPI_ETH, &eth_ip);
+    tcpip_adapter_spi_eth_start(eth_mac, &eth_ip);
+
+    return ESP_OK;
+}
+
+esp_err_t system_event_spi_eth_stop_handle_default(system_event_t *event)
+{
+    tcpip_adapter_stop(TCPIP_ADAPTER_IF_SPI_ETH);
+
+    return ESP_OK;
+}
+
+esp_err_t system_event_spi_eth_connected_handle_default(system_event_t *event)
+{
+    tcpip_adapter_dhcp_status_t status;
+
+    tcpip_adapter_up(TCPIP_ADAPTER_IF_SPI_ETH);
+
+    tcpip_adapter_dhcpc_get_status(TCPIP_ADAPTER_IF_SPI_ETH, &status);
+
+    if (status == TCPIP_ADAPTER_DHCP_INIT) {
+        tcpip_adapter_dhcpc_start(TCPIP_ADAPTER_IF_SPI_ETH);
+    } else if (status == TCPIP_ADAPTER_DHCP_STOPPED) {
+        tcpip_adapter_ip_info_t eth_ip;
+
+        tcpip_adapter_get_ip_info(TCPIP_ADAPTER_IF_SPI_ETH, &eth_ip);
+
+        if (!(ip4_addr_isany_val(eth_ip.ip) || ip4_addr_isany_val(eth_ip.netmask) || ip4_addr_isany_val(eth_ip.gw))) {
+            system_event_t evt;
+
+            //notify event
+            evt.event_id = SYSTEM_EVENT_SPI_ETH_GOT_IP;
+            memcpy(&evt.event_info.got_ip.ip_info, &eth_ip, sizeof(tcpip_adapter_ip_info_t));
+
+            esp_event_send(&evt);
+        } else {
+            ESP_LOGE(TAG, "invalid static ip");
+        }
+    }
+
+    return ESP_OK;
+}
+
+esp_err_t system_event_spi_eth_disconnected_handle_default(system_event_t *event)
+{
+    tcpip_adapter_down(TCPIP_ADAPTER_IF_SPI_ETH);
+    return ESP_OK;
+}
+
+void esp_event_set_default_spi_eth_handlers()
+{
+     default_event_handlers[SYSTEM_EVENT_SPI_ETH_START]           = system_event_spi_eth_start_handle_default;
+     default_event_handlers[SYSTEM_EVENT_SPI_ETH_STOP]            = system_event_spi_eth_stop_handle_default;
+     default_event_handlers[SYSTEM_EVENT_SPI_ETH_CONNECTED]       = system_event_spi_eth_connected_handle_default;
+     default_event_handlers[SYSTEM_EVENT_SPI_ETH_DISCONNECTED]    = system_event_spi_eth_disconnected_handle_default;
+     default_event_handlers[SYSTEM_EVENT_SPI_ETH_GOT_IP]         = NULL;
+}
+
+#endif
+
+#ifdef CONFIG_LUA_RTOS_USE_OPENVPN
+static esp_err_t system_event_tun_start_handle_default(system_event_t *event);
+static esp_err_t system_event_tun_stop_handle_default(system_event_t *event);
+static esp_err_t system_event_tun_connected_handle_default(system_event_t *event);
+static esp_err_t system_event_tun_disconnected_handle_default(system_event_t *event);
+esp_err_t tcpip_adapter_tun_start(uint8_t *mac, tcpip_adapter_ip_info_t *ip_info);
+
+esp_err_t system_event_tun_start_handle_default(system_event_t *event)
+{
+    tcpip_adapter_ip_info_t tun_ip;
+    uint8_t tun_mac[6] = {0x00,0x00,0x00,0x00,0x00,0x00};
+
+    tcpip_adapter_get_ip_info(TCPIP_ADAPTER_IF_TUN, &tun_ip);
+    tcpip_adapter_tun_start(tun_mac, &tun_ip);
+
+    return ESP_OK;
+}
+
+esp_err_t system_event_tun_stop_handle_default(system_event_t *event)
+{
+    tcpip_adapter_stop(TCPIP_ADAPTER_IF_TUN);
+
+    return ESP_OK;
+}
+
+esp_err_t system_event_tun_connected_handle_default(system_event_t *event)
+{
+    tcpip_adapter_dhcp_status_t status;
+
+    tcpip_adapter_up(TCPIP_ADAPTER_IF_TUN);
+
+    tcpip_adapter_dhcpc_get_status(TCPIP_ADAPTER_IF_TUN, &status);
+
+    if (status == TCPIP_ADAPTER_DHCP_INIT) {
+        tcpip_adapter_dhcpc_start(TCPIP_ADAPTER_IF_TUN);
+    } else if (status == TCPIP_ADAPTER_DHCP_STOPPED) {
+        tcpip_adapter_ip_info_t tun_ip;
+
+        tcpip_adapter_get_ip_info(TCPIP_ADAPTER_IF_TUN, &tun_ip);
+
+        if (!(ip4_addr_isany_val(tun_ip.ip) || ip4_addr_isany_val(tun_ip.netmask) || ip4_addr_isany_val(tun_ip.gw))) {
+            system_event_t evt;
+
+            //notify event
+            evt.event_id = SYSTEM_EVENT_TUN_GOT_IP;
+            memcpy(&evt.event_info.got_ip.ip_info, &tun_ip, sizeof(tcpip_adapter_ip_info_t));
+
+            esp_event_send(&evt);
+        } else {
+            ESP_LOGE(TAG, "invalid static ip");
+        }
+    }
+
+    return ESP_OK;
+}
+
+esp_err_t system_event_tun_disconnected_handle_default(system_event_t *event)
+{
+    tcpip_adapter_down(TCPIP_ADAPTER_IF_TUN);
+    return ESP_OK;
+}
+
+void esp_event_set_default_tun_handlers()
+{
+     default_event_handlers[SYSTEM_EVENT_TUN_START]           = system_event_tun_start_handle_default;
+     default_event_handlers[SYSTEM_EVENT_TUN_STOP]            = system_event_tun_stop_handle_default;
+     default_event_handlers[SYSTEM_EVENT_TUN_CONNECTED]       = system_event_tun_connected_handle_default;
+     default_event_handlers[SYSTEM_EVENT_TUN_DISCONNECTED]    = system_event_tun_disconnected_handle_default;
+     default_event_handlers[SYSTEM_EVENT_TUN_GOT_IP]         = NULL;
+}
+#endif
+
 esp_err_t system_event_eth_start_handle_default(system_event_t *event)
 {
     tcpip_adapter_ip_info_t eth_ip;
diff --git a/components/esp32/include/esp_event.h b/components/esp32/include/esp_event_legacy.h
index 53c416c2..766ad14d 100644
--- a/components/esp32/include/esp_event_legacy.h
+++ b/components/esp32/include/esp_event_legacy.h
@@ -51,6 +51,16 @@ typedef enum {
     SYSTEM_EVENT_ETH_CONNECTED,            /**< ESP32 ethernet phy link up */
     SYSTEM_EVENT_ETH_DISCONNECTED,         /**< ESP32 ethernet phy link down */
     SYSTEM_EVENT_ETH_GOT_IP,               /**< ESP32 ethernet got IP from connected AP */
+    SYSTEM_EVENT_SPI_ETH_START,            /**< ESP32 spi ethernet start */
+    SYSTEM_EVENT_SPI_ETH_STOP,             /**< ESP32 spi ethernet stop */
+    SYSTEM_EVENT_SPI_ETH_CONNECTED,        /**< ESP32 spi ethernet phy link up */
+    SYSTEM_EVENT_SPI_ETH_DISCONNECTED,     /**< ESP32 spi ethernet phy link down */
+    SYSTEM_EVENT_SPI_ETH_GOT_IP,           /**< ESP32 spi ethernet got IP from connected AP */
+    SYSTEM_EVENT_TUN_START,            /**< ESP32 tun start */
+    SYSTEM_EVENT_TUN_STOP,             /**< ESP32 tun stop */
+    SYSTEM_EVENT_TUN_CONNECTED,        /**< ESP32 tun link up */
+    SYSTEM_EVENT_TUN_DISCONNECTED,     /**< ESP32 tun link down */
+    SYSTEM_EVENT_TUN_GOT_IP,           /**< ESP32 tun got IP */
     SYSTEM_EVENT_MAX
 } system_event_id_t;
 
@@ -179,6 +189,8 @@ void esp_event_set_default_eth_handlers();
   */
 void esp_event_set_default_wifi_handlers();
 
+void esp_event_set_default_spi_eth_handlers();
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/components/esp32/include/esp_interface.h b/components/esp32/include/esp_interface.h
index 950c05bb..08e5a232 100644
--- a/components/esp32/include/esp_interface.h
+++ b/components/esp32/include/esp_interface.h
@@ -26,6 +26,8 @@ typedef enum {
     ESP_IF_WIFI_STA = 0,     /**< ESP32 station interface */
     ESP_IF_WIFI_AP,          /**< ESP32 soft-AP interface */
     ESP_IF_ETH,              /**< ESP32 ethernet interface */
+    ESP_IF_SPI_ETH,          /**< ESP32 spi ethernet interface */
+    ESP_IF_TUN,              /**< ESP32 TUN interface */
     ESP_IF_MAX
 } esp_interface_t;
 
diff --git a/components/tcpip_adapter/tcpip_adapter_lwip.c b/components/tcpip_adapter/tcpip_adapter_lwip.c
index 70ea3830c..58a8c8da0 100644
--- a/components/tcpip_adapter/tcpip_adapter_lwip.c
+++ b/components/tcpip_adapter/tcpip_adapter_lwip.c
@@ -32,6 +32,8 @@
 #endif
 #include "netif/wlanif.h"
 #include "netif/ethernetif.h"
+#include "netif/spiethernetif.h"
+#include "netif/tunif.h"
 
 #include "dhcpserver/dhcpserver.h"
 #include "dhcpserver/dhcpserver_options.h"
@@ -153,10 +155,14 @@ static int tcpip_adapter_ipc_check(tcpip_adapter_api_msg_t *msg)
 
 static esp_err_t tcpip_adapter_update_default_netif(void)
 {
-    if (netif_is_up(esp_netif[TCPIP_ADAPTER_IF_STA])) {
+    if (netif_is_up(esp_netif[TCPIP_ADAPTER_IF_TUN])) {
+        netif_set_default(esp_netif[TCPIP_ADAPTER_IF_TUN]);
+    } else if (netif_is_up(esp_netif[TCPIP_ADAPTER_IF_STA])) {
         netif_set_default(esp_netif[TCPIP_ADAPTER_IF_STA]);
     } else if (netif_is_up(esp_netif[TCPIP_ADAPTER_IF_ETH])) {
         netif_set_default(esp_netif[TCPIP_ADAPTER_IF_ETH]);
+    } else if (netif_is_up(esp_netif[TCPIP_ADAPTER_IF_SPI_ETH])) {
+        netif_set_default(esp_netif[TCPIP_ADAPTER_IF_SPI_ETH]);
     } else if (netif_is_up(esp_netif[TCPIP_ADAPTER_IF_AP])) {
         netif_set_default(esp_netif[TCPIP_ADAPTER_IF_AP]);
     }
@@ -169,7 +173,10 @@ static esp_err_t tcpip_adapter_start(tcpip_adapter_if_t tcpip_if, uint8_t *mac,
     TCPIP_ADAPTER_IPC_CALL(tcpip_if, mac, ip_info, 0, tcpip_adapter_start_api);
 
     if (tcpip_if >= TCPIP_ADAPTER_IF_MAX || mac == NULL || ip_info == NULL) {
-        return ESP_ERR_TCPIP_ADAPTER_INVALID_PARAMS;
+       // TUN interface has not mac address
+       if ((mac == NULL) && (tcpip_if != TCPIP_ADAPTER_IF_TUN)) {
+           return ESP_ERR_TCPIP_ADAPTER_INVALID_PARAMS;
+       }
     }
 
     if (esp_netif[tcpip_if] == NULL || !netif_is_up(esp_netif[tcpip_if])) {
@@ -180,7 +187,11 @@ static esp_err_t tcpip_adapter_start(tcpip_adapter_if_t tcpip_if, uint8_t *mac,
         if (esp_netif[tcpip_if] == NULL) {
             return ESP_ERR_NO_MEM;
         }
-        memcpy(esp_netif[tcpip_if]->hwaddr, mac, NETIF_MAX_HWADDR_LEN);
+
+        // TUN interface has not mac address
+        if (tcpip_if != TCPIP_ADAPTER_IF_TUN) {
+           memcpy(esp_netif[tcpip_if]->hwaddr, mac, NETIF_MAX_HWADDR_LEN);
+        }
 
         netif_init = tcpip_if_to_netif_init_fn(tcpip_if);
         assert(netif_init != NULL);
@@ -213,6 +224,22 @@ static esp_err_t tcpip_adapter_start(tcpip_adapter_if_t tcpip_if, uint8_t *mac,
     return ESP_OK;
 }
 
+#ifdef CONFIG_LUA_RTOS_ETH_HW_TYPE_SPI
+esp_err_t tcpip_adapter_spi_eth_start(uint8_t *mac, tcpip_adapter_ip_info_t *ip_info)
+{
+     esp_netif_init_fn[TCPIP_ADAPTER_IF_SPI_ETH] = spi_ethernetif_init;
+     return tcpip_adapter_start(TCPIP_ADAPTER_IF_SPI_ETH, mac, ip_info);
+}
+#endif
+
+#ifdef CONFIG_LUA_RTOS_USE_OPENVPN
+esp_err_t tcpip_adapter_tun_start(uint8_t *mac, tcpip_adapter_ip_info_t *ip_info)
+{
+     esp_netif_init_fn[TCPIP_ADAPTER_IF_TUN] = tunif_init;
+     return tcpip_adapter_start(TCPIP_ADAPTER_IF_TUN, mac, ip_info);
+}
+#endif
+
 esp_err_t tcpip_adapter_eth_start(uint8_t *mac, tcpip_adapter_ip_info_t *ip_info)
 {
      esp_netif_init_fn[TCPIP_ADAPTER_IF_ETH] = ethernetif_init;
@@ -258,7 +285,7 @@ esp_err_t tcpip_adapter_stop(tcpip_adapter_if_t tcpip_if)
         if (TCPIP_ADAPTER_DHCP_STOPPED != dhcps_status) {
             dhcps_status = TCPIP_ADAPTER_DHCP_INIT;
         }
-    } else if (tcpip_if == TCPIP_ADAPTER_IF_STA || tcpip_if == TCPIP_ADAPTER_IF_ETH) {
+    } else if (tcpip_if == TCPIP_ADAPTER_IF_STA || tcpip_if == TCPIP_ADAPTER_IF_ETH || tcpip_if == TCPIP_ADAPTER_IF_SPI_ETH || tcpip_if == TCPIP_ADAPTER_IF_TUN) {
         dhcp_release(esp_netif[tcpip_if]);
         dhcp_stop(esp_netif[tcpip_if]);
         dhcp_cleanup(esp_netif[tcpip_if]);
@@ -285,7 +312,7 @@ esp_err_t tcpip_adapter_up(tcpip_adapter_if_t tcpip_if)
 {
     TCPIP_ADAPTER_IPC_CALL(tcpip_if, 0, 0, 0, tcpip_adapter_up_api);
 
-    if (tcpip_if == TCPIP_ADAPTER_IF_STA ||  tcpip_if == TCPIP_ADAPTER_IF_ETH ) {
+    if (tcpip_if == TCPIP_ADAPTER_IF_STA ||  tcpip_if == TCPIP_ADAPTER_IF_ETH ||  tcpip_if == TCPIP_ADAPTER_IF_SPI_ETH || tcpip_if == TCPIP_ADAPTER_IF_TUN ) {
         if (esp_netif[tcpip_if] == NULL) {
             return ESP_ERR_TCPIP_ADAPTER_IF_NOT_READY;
         }
@@ -310,7 +337,7 @@ esp_err_t tcpip_adapter_down(tcpip_adapter_if_t tcpip_if)
 {
     TCPIP_ADAPTER_IPC_CALL(tcpip_if, 0, 0, 0, tcpip_adapter_down_api);
 
-    if (tcpip_if == TCPIP_ADAPTER_IF_STA ||  tcpip_if == TCPIP_ADAPTER_IF_ETH ) {
+    if (tcpip_if == TCPIP_ADAPTER_IF_STA ||  tcpip_if == TCPIP_ADAPTER_IF_ETH ||  tcpip_if == TCPIP_ADAPTER_IF_SPI_ETH || tcpip_if == TCPIP_ADAPTER_IF_TUN) {
         if (esp_netif[tcpip_if] == NULL) {
             return ESP_ERR_TCPIP_ADAPTER_IF_NOT_READY;
         }
@@ -404,10 +431,10 @@ esp_err_t tcpip_adapter_set_ip_info(tcpip_adapter_if_t tcpip_if, const tcpip_ada
     if (tcpip_if == TCPIP_ADAPTER_IF_AP) {
         tcpip_adapter_dhcps_get_status(tcpip_if, &status);
 
-        if (status != TCPIP_ADAPTER_DHCP_STOPPED) {
-            return ESP_ERR_TCPIP_ADAPTER_DHCP_NOT_STOPPED;
-        }
-    } else if (tcpip_if == TCPIP_ADAPTER_IF_STA || tcpip_if == TCPIP_ADAPTER_IF_ETH ) {
+       if (status != TCPIP_ADAPTER_DHCP_STOPPED) {
+           return ESP_ERR_TCPIP_ADAPTER_DHCP_NOT_STOPPED;
+      }
+    } else if (tcpip_if == TCPIP_ADAPTER_IF_STA || tcpip_if == TCPIP_ADAPTER_IF_ETH || tcpip_if == TCPIP_ADAPTER_IF_SPI_ETH || tcpip_if == TCPIP_ADAPTER_IF_TUN ) {
         tcpip_adapter_dhcpc_get_status(tcpip_if, &status);
 
         if (status != TCPIP_ADAPTER_DHCP_STOPPED) {
@@ -428,7 +457,7 @@ esp_err_t tcpip_adapter_set_ip_info(tcpip_adapter_if_t tcpip_if, const tcpip_ada
 
     if (p_netif != NULL && netif_is_up(p_netif)) {
         netif_set_addr(p_netif, &ip_info->ip, &ip_info->netmask, &ip_info->gw);
-        if (tcpip_if == TCPIP_ADAPTER_IF_STA || tcpip_if == TCPIP_ADAPTER_IF_ETH) {
+        if (tcpip_if == TCPIP_ADAPTER_IF_STA || tcpip_if == TCPIP_ADAPTER_IF_ETH || tcpip_if == TCPIP_ADAPTER_IF_SPI_ETH || tcpip_if == TCPIP_ADAPTER_IF_TUN) {
             if (!(ip4_addr_isany_val(ip_info->ip) || ip4_addr_isany_val(ip_info->netmask) || ip4_addr_isany_val(ip_info->gw))) {
                 system_event_t evt;
                 memset(&evt, 0, sizeof(system_event_t));
@@ -433,6 +460,10 @@ esp_err_t tcpip_adapter_set_ip_info(tcpip_adapter_if_t tcpip_if, const tcpip_ada
                     evt.event_id = SYSTEM_EVENT_STA_GOT_IP;
                 } else if (tcpip_if == TCPIP_ADAPTER_IF_ETH) {
                     evt.event_id = SYSTEM_EVENT_ETH_GOT_IP;
+                } else if (tcpip_if == TCPIP_ADAPTER_IF_SPI_ETH) {
+                    evt.event_id = SYSTEM_EVENT_SPI_ETH_GOT_IP;
+                } else if (tcpip_if == TCPIP_ADAPTER_IF_TUN) {
+                    evt.event_id = SYSTEM_EVENT_TUN_GOT_IP;
                 }
                 evt.event_info.got_ip.ip_changed = false;
 
@@ -532,7 +563,6 @@ esp_err_t tcpip_adapter_get_ip6_linklocal(tcpip_adapter_if_t tcpip_if, ip6_addr_
     return ESP_OK;
 }
 
-#if 0
 esp_err_t tcpip_adapter_get_mac(tcpip_adapter_if_t tcpip_if, uint8_t mac[6])
 {
     struct netif *p_netif;
@@ -570,7 +600,6 @@ esp_err_t tcpip_adapter_set_mac(tcpip_adapter_if_t tcpip_if, uint8_t mac[6])
 
     return ESP_ERR_TCPIP_ADAPTER_IF_NOT_READY;
 }
-#endif
 
 esp_err_t tcpip_adapter_dhcps_option(tcpip_adapter_dhcp_option_mode_t opt_op, tcpip_adapter_dhcp_option_id_t opt_id, void *opt_val, uint32_t opt_len)
 {
@@ -677,7 +706,7 @@ esp_err_t tcpip_adapter_dhcps_option(tcpip_adapter_dhcp_option_mode_t opt_op, tc
             }
             break;
         }
-       
+
         default:
             break;
         }
@@ -702,7 +731,7 @@ esp_err_t tcpip_adapter_set_dns_info(tcpip_adapter_if_t tcpip_if, tcpip_adapter_
         ESP_LOGD(TAG, "set dns invalid if=%d", tcpip_if);
         return ESP_ERR_TCPIP_ADAPTER_INVALID_PARAMS;
     }
- 
+
     if (!dns) {
         ESP_LOGD(TAG, "set dns null dns");
         return ESP_ERR_TCPIP_ADAPTER_INVALID_PARAMS;
@@ -712,7 +741,7 @@ esp_err_t tcpip_adapter_set_dns_info(tcpip_adapter_if_t tcpip_if, tcpip_adapter_
         ESP_LOGD(TAG, "set dns invalid type=%d", type);
         return ESP_ERR_TCPIP_ADAPTER_INVALID_PARAMS;
     }
-    
+
     if (ip4_addr_isany_val(dns->ip.u_addr.ip4)) {
         ESP_LOGD(TAG, "set dns invalid dns");
         return ESP_ERR_TCPIP_ADAPTER_INVALID_PARAMS;
@@ -743,12 +772,12 @@ static esp_err_t tcpip_adapter_set_dns_info_api(tcpip_adapter_api_msg_t * msg)
 }
 
 esp_err_t tcpip_adapter_get_dns_info(tcpip_adapter_if_t tcpip_if, tcpip_adapter_dns_type_t type, tcpip_adapter_dns_info_t *dns)
-{ 
+{
     tcpip_adapter_dns_param_t dns_param;
 
     dns_param.dns_type =  type;
     dns_param.dns_info =  dns;
-    
+
     TCPIP_ADAPTER_IPC_CALL(tcpip_if, type,  0, &dns_param, tcpip_adapter_get_dns_info_api);
     if (!dns) {
         ESP_LOGD(TAG, "get dns null dns");
@@ -759,7 +788,7 @@ esp_err_t tcpip_adapter_get_dns_info(tcpip_adapter_if_t tcpip_if, tcpip_adapter_
         ESP_LOGD(TAG, "get dns invalid type=%d", type);
         return ESP_ERR_TCPIP_ADAPTER_INVALID_PARAMS;
     }
-    
+
     if (tcpip_if >= TCPIP_ADAPTER_IF_MAX) {
         ESP_LOGD(TAG, "get dns invalid tcpip_if=%d",tcpip_if);
         return ESP_ERR_TCPIP_ADAPTER_INVALID_PARAMS;
@@ -880,7 +909,11 @@ static void tcpip_adapter_dhcpc_cb(struct netif *netif)
         tcpip_if = TCPIP_ADAPTER_IF_STA;
     } else if(netif == esp_netif[TCPIP_ADAPTER_IF_ETH] ) {
         tcpip_if = TCPIP_ADAPTER_IF_ETH;
-    } else { 
+    } else if(netif == esp_netif[TCPIP_ADAPTER_IF_SPI_ETH] ) {
+        tcpip_if = TCPIP_ADAPTER_IF_SPI_ETH;
+    } else if(netif == esp_netif[TCPIP_ADAPTER_IF_TUN] ) {
+        tcpip_if = TCPIP_ADAPTER_IF_TUN;
+    } else {
         ESP_LOGD(TAG, "err netif=%p", netif);
         return;
     }
@@ -953,7 +986,7 @@ static esp_err_t tcpip_adapter_start_ip_lost_timer(tcpip_adapter_if_t tcpip_if)
         return ESP_OK;
     }
 
-    ESP_LOGD(TAG, "if%d start ip lost tmr: no need start because netif=%p interval=%d ip=%x", 
+    ESP_LOGD(TAG, "if%d start ip lost tmr: no need start because netif=%p interval=%d ip=%x",
                   tcpip_if, netif, CONFIG_IP_LOST_TIMER_INTERVAL, ip_info_old->ip.addr);
 
     return ESP_OK;
@@ -995,7 +1028,7 @@ esp_err_t tcpip_adapter_dhcpc_start(tcpip_adapter_if_t tcpip_if)
 {
     TCPIP_ADAPTER_IPC_CALL(tcpip_if, 0, 0, 0, tcpip_adapter_dhcpc_start_api);
 
-    if ((tcpip_if != TCPIP_ADAPTER_IF_STA && tcpip_if != TCPIP_ADAPTER_IF_ETH)  || tcpip_if >= TCPIP_ADAPTER_IF_MAX) {
+    if ((tcpip_if != TCPIP_ADAPTER_IF_STA && tcpip_if != TCPIP_ADAPTER_IF_ETH && tcpip_if != TCPIP_ADAPTER_IF_SPI_ETH && tcpip_if != TCPIP_ADAPTER_IF_TUN)  || tcpip_if >= TCPIP_ADAPTER_IF_MAX) {
         ESP_LOGD(TAG, "dhcp client invalid if=%d", tcpip_if);
         return ESP_ERR_TCPIP_ADAPTER_INVALID_PARAMS;
     }
@@ -1051,7 +1084,7 @@ esp_err_t tcpip_adapter_dhcpc_stop(tcpip_adapter_if_t tcpip_if)
 {
     TCPIP_ADAPTER_IPC_CALL(tcpip_if, 0, 0, 0, tcpip_adapter_dhcpc_stop_api);
 
-    if ((tcpip_if != TCPIP_ADAPTER_IF_STA && tcpip_if != TCPIP_ADAPTER_IF_ETH)  || tcpip_if >= TCPIP_ADAPTER_IF_MAX) {
+    if ((tcpip_if != TCPIP_ADAPTER_IF_STA && tcpip_if != TCPIP_ADAPTER_IF_ETH && tcpip_if != TCPIP_ADAPTER_IF_SPI_ETH && tcpip_if != TCPIP_ADAPTER_IF_TUN)  || tcpip_if >= TCPIP_ADAPTER_IF_MAX) {
         ESP_LOGD(TAG, "dhcp client invalid if=%d", tcpip_if);
         return ESP_ERR_TCPIP_ADAPTER_INVALID_PARAMS;
     }
@@ -1121,6 +1154,10 @@ esp_interface_t tcpip_adapter_get_esp_if(void *dev)
         return ESP_IF_WIFI_AP;
     } else if (p_netif == esp_netif[TCPIP_ADAPTER_IF_ETH]) {
         return ESP_IF_ETH;
+    } else if (p_netif == esp_netif[TCPIP_ADAPTER_IF_SPI_ETH]) {
+        return ESP_IF_SPI_ETH;
+    } else if (p_netif == esp_netif[TCPIP_ADAPTER_IF_TUN]) {
+        return ESP_IF_TUN;
     }
 
     return ESP_IF_MAX;
diff --git a/components/lwip/port/esp32/netif/dhcp_state.c b/components/lwip/port/esp32/netif/dhcp_state.c
index 9301ff3b0..542f48ba6 100644
--- a/components/lwip/port/esp32/netif/dhcp_state.c
+++ b/components/lwip/port/esp32/netif/dhcp_state.c
@@ -26,7 +26,7 @@
 #define VALID_NETIF_ID(id) ((id < ESP_IF_MAX) && (id != ESP_IF_WIFI_AP))
 
 static uint32_t restored_ip_addr[TCPIP_ADAPTER_IF_MAX];
-static const char *interface_key[] = {"IF_STA", "IF_AP", "IF_ETH"};
+static const char *const interface_key[] = {"IF_STA", "IF_AP", "IF_ETH", "IF_SPI_ETH", "IF_TUN"};
 
 _Static_assert(sizeof(interface_key) / sizeof(char*) == TCPIP_ADAPTER_IF_MAX,
                "Number interface keys differs from number of interfaces");
@@ -84,4 +84,4 @@ void dhcp_ip_addr_erase(void *netif)
             nvs_close(nvs);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/components/tcpip_adapter/include/tcpip_adapter.h b/components/tcpip_adapter/include/tcpip_adapter.h
index 6850f23a4..e663397ba 100644
--- a/components/tcpip_adapter/include/tcpip_adapter.h
+++ b/components/tcpip_adapter/include/tcpip_adapter.h
@@ -96,6 +96,8 @@ typedef enum {
     TCPIP_ADAPTER_IF_STA = 0,     /**< Wi-Fi STA (station) interface */
     TCPIP_ADAPTER_IF_AP,          /**< Wi-Fi soft-AP interface */
     TCPIP_ADAPTER_IF_ETH,         /**< Ethernet interface */
+    TCPIP_ADAPTER_IF_SPI_ETH,     /**< ESP32 spi ethernet interface */
+    TCPIP_ADAPTER_IF_TUN,         /**< ESP32 tun interface */
     TCPIP_ADAPTER_IF_MAX
 } tcpip_adapter_if_t;
 
@@ -406,11 +408,9 @@ esp_err_t tcpip_adapter_create_ip6_linklocal(tcpip_adapter_if_t tcpip_if);
  */
 esp_err_t tcpip_adapter_get_ip6_linklocal(tcpip_adapter_if_t tcpip_if, ip6_addr_t *if_ip6);
 
-#if 0
 esp_err_t tcpip_adapter_get_mac(tcpip_adapter_if_t tcpip_if, uint8_t *mac);
 
 esp_err_t tcpip_adapter_set_mac(tcpip_adapter_if_t tcpip_if, uint8_t *mac);
-#endif
 
 /**
  * @brief  Get DHCP Server status
@@ -661,6 +661,8 @@ esp_err_t tcpip_adapter_get_netif(tcpip_adapter_if_t tcpip_if, void ** netif);
  */
 bool tcpip_adapter_is_netif_up(tcpip_adapter_if_t tcpip_if);
 
+esp_err_t tcpip_adapter_tun_start(uint8_t *mac, tcpip_adapter_ip_info_t *ip_info);
+
 #ifdef __cplusplus
 }
 #endif
